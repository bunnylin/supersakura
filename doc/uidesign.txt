User Interactions
=================

In general:
- Reading text: enter/click/confirm to continue.
- Textbox choice selection: highlight choice and enter/click/confirm.
- Imagemap choice selection: point & click, or highlight and enter/confirm.
- Mouseover such imagemap areas, or move between them with cursors.
- Skip animations etc by triggering minor or major interrupt events.
- Meta-interaction through modal pop-up menu, and summonable special menus.

Below, input reactions are tested from the highest downward. As soon as any
reaction is triggered, the remaining items are skipped.

Keyboard
--------
Enter
- If skip seen text mode is enabled, disable it.
- If textboxes are hidden, make them visible.
- If box 0 is in showtext state and transcript mode is off, retrieve the
  last line, and if it's not empty, compile and run it as a minifiber.
- If a pageable box needs to show more content, scroll the box.
- If a mouseoverable without -mouseonly is highlighted and it has a trigger
  label, trigger it.
- If choicematic is active, select the highlighted choice.
- If choicematic typeinbox is valid, and any fibers are in waittyping state,
  resume the fibers.
- If any fibers are waiting for a keypress, resume the fibers.
- If a normal interrupt is defined, trigger it.

Esc
- If skip seen text mode is enabled, disable it.
- If textboxes are hidden, ignore.
- If box 0 is in showtext state and transcript mode is on, disable transcript
  mode and popout the box.
- If choicematic is active, and not on top choice level, go up a level.
- If an esc-interrupt is defined, trigger it.
- If metastate is normal, enter the metamenu metastate.

Normal text input
- If textboxes are hidden, ignore.
- If box 0 is in showtext state and transcript mode is off, print the
  character in the box.
- If choicematic is set to accept typing in a box, print the character there.
- If choicematic is active, then scan from current highlight onward to the
  first choice beginning with the entered character, and highlight that. Roll
  around the choice showlist as needed.

Delete/backspace
- If textboxes are hidden, ignore.
- If any box from 0 upward accepts text input, delete some text in the box.
- If choicematic is active, and not on top choice level, go up a level.

Home/end
- If textboxes are hidden, ignore.
- If any box from 0 upward accepts text input, move the caret.
- If choicematic is active, move the highlight.
- If a freely scrollable box exists, scroll the box to top or bottom.

Pageup/pagedown
- If textboxes are hidden, ignore.
- If choicematic is active, move the highlight.
- If a freely scrollable box exists, scroll the box by a pageful.

Cursor keys left/right
- If box 0 is in showtext state and transcript mode is off, move the caret?
- If choicematic is active and has more than one column, move the highlight.
- If mouseoverables without -mouseonly exist, find the closest left/right
  from current mousexy and mouseon it, mouseoffing current overable if any.

Cursor keys up/down
- If choicematic is active, move the highlight.
- If a freely scrollable box exists, scroll the box up/down.
- If mouseoverables without -mouseonly exist, find the closest up/down from
  current mousexy and mouseon it, mouseoffing current overable if any.

Ctrl-A
- If metastate is normal, enable/disable skip seen text mode.

Ctrl-B
- If metastate is normal and boxes are hidable, hide/display textboxes.

Ctrl-D
- If debug mode is not enabled, ignore. (Ctrl-XYZZY to enable debug mode.)
- If boxes hidden, show boxes, and don't stop at this step.
- If box 0 is in showtext state and transcript mode is off, pop out the box.
- Otherwise disable transcript mode and pop in the box.

Ctrl-L
- If metastate is normal, enter saveload metastate, with load highlighted.

Pause, Ctrl-P
- Pause/unpause the game.

Shift-Pause, Ctrl-Shift-P, Ctrl-Alt-P
- Enter single-step mode.

Ctrl-Q
- If metastate is normal, enter quit confirm metastate.

Ctrl-R [console port only]
- Redraw the screen.

Ctrl-S
- If metastate is normal, enter saveload metastate, with save highlighted.

Ctrl-T
- If not in normal metastate or boxes hidden, ignore.
- If box 0 is in showtext state and transcript mode is on, disable transcript
  mode and pop out the box.
- Otherwise enable transcript mode and pop in the box.

Ctrl-W [console port only]
- Switches between RGB and LXY palette mixing modes.

Ctrl-XYZZY
- Typing this enables debug mode.

Gamepad
-------

Confirm button (low position)
- Same as enter key.

Cancel button (right position)
- If skip seen text mode is enabled, disable it.
- If textboxes are hidden, make them visible.
- If box 0 is in showtext state and transcript mode is on, disable transcript
  mode and popout the box.
- If choicematic is active, and not on top choice level, go up a level.
- If a pageable box needs to show more content, scroll the box.
- If any fibers are waiting for a keypress, resume the fibers.
- If a normal interrupt is defined, trigger it.
- If an esc-interrupt is defined, trigger it.

Menu button (high position)
- If skip seen text mode is enabled, disable it.
- If textboxes are hidden, make them visible.
- If box 0 is in showtext state and transcript mode is on, disable transcript
  mode and popout the box.
- If an esc-interrupt is defined, trigger it.
- If metastate is normal, enter the metamenu metastate.

Log button (left position)
- If not in normal metastate, ignore.
- If skip seen text mode is enabled, disable it.
- If textboxes are hidden, make them visible.
- If box 0 is in showtext state and transcript mode is on, disable transcript
  mode and pop out the box.
- Otherwise enable transcript mode and pop in the box.

Start button
- Pause/unpause the game.

Option/select button
- If metastate is normal and boxes are hidable, hide/display textboxes.

Left/Right/Up/Down
- Same as cursor keys.

Left stick
- Probably same as cursor keys? Need to check how SDL returns this input.

Mouse
-----

Mouse movement
- If textboxes are visible and the topmost interactive box has choices, and
  the mouse is over a choice, then highlight it.
- Trigger mouseon and mouseoff events on mouseoverables.

Left-click
- If skip seen text mode is enabled, disable it.
- If textboxes are hidden, make them visible.
- If the cursor is not over any box, but is on a mouseoverable which has
  a trigger label, trigger it.
- If choicematic is active and the cursor is over a choice, select it.
- If any pageable box needs to show more content, scroll the box.
- If any fibers are waiting for a keypress, resume the fibers.
- If a normal interrupt is defined, trigger it.

Right-click
- If skip seen text mode is enabled, disable it.
- If box 0 is in showtext state and transcript mode is on, disable transcript
  mode and popout the box.
- If boxes are not hidden, and choicematic is active, and not on top choice
  level, go up a level.
- If boxes are not hidden, and metastate is normal, and the cursor is over
  any box, hide all boxes.
- If an esc-interrupt is defined, trigger it.
- If metastate is normal, enter the metamenu metastate.

Mouse wheel
- If a choicebox is active, highlight the next choice in the given direction.
- If a freely scrollable box exists, scroll the box up/down.


Metamenu
========

General contents of the metamenu:
Save (Ctrl-S)
Load (Ctrl-L)
Text log (Ctrl-T)
Skip seen text (Ctrl-A)
Fullscreen
Viewframe
................
Settings
Return to title
Quit (Ctrl-Q)

This is a pop-up menu that the user can bring up by pressing esc, or
right-clicking, or pressing the menu button. It has various functions,
including save/load, fullscreen, settings, and quit. It also needs to have
game-specific options, such as a viewframe toggle, so some script control is
unavoidable.

Since the metamenu should be controllable by gamepad, it needs to be handled
in-game. The simplest way to do this is to use the existing textbox system,
and hand control to a special script label named metamenu. To keep this from
messing up the current game state, most of the game state must be savestated
before invoking the metamenu. Once the script signals it's finished, the
engine must loadstate and continue where it left off. As a side effect, the
instant savestate can be easily built into a full save game, if the user
wants to save.

When the metamenu is summoned:
- If textboxes are hidden, make them visible.
- Save fibers, gobs, anims, events, boxes, effects.
- Delete effects, anims, events, fibers.
- Make a thumbnail of the screen, add that to the savestate elements.
- Spawn metamenu. as the sole new fiber.
- Set metastate to metastate_metamenu.

When the metamenu or any other fiber it has spawned invokes the word of power
sys.closemetamenu, restore fibers, gobs, anims, events, boxes, effects. Note,
that variables are left untouched by these; the metamenu script can carry
useful state information in normal script variables.

The metamenu can also be terminated as a result of sys.loadstate,
sys.showhistory, and sys.restartgame. The save and load options should jump
to the special script label named metamenu.saveload; the settings option
jumps to the special label metamenu.settings.

The engine's internal metastate variable tracks whether the engine is running
normally or has brought up the metamenu. While the metamenu is visible, it
should define a normal interrupt and an esc-interrupt which close the menu.

The metamenu.saveload script brings up a full-screen menu containing
a vertical choicebox with all current savegames, and the option for a new
save topmost. At the top should be four mouseoverables lined horizontally:
Save, Load, Delete, Cancel.

Pressing left/right will move between them, while pressing up/down will move
in the choicebox. An extra textbox is needed on the right side, which is
seeded with either the currently highlighted save's data, or with data that
would be used if you were to save a new game: one row containing a date-time,
and a second row containing a user-typable description of the save. Above or
below this box should be a thumbnail associated with this save.


Settings menu reqs
==================

Because I'd like to allow gamepad controls, the settings menu like other
menus needs to be implemented in-engine. Making it work like PPSSPP's menus
seems reasonable: a freely scrollable list of items on the left and their
current values on the right, consisting of checkboxes, comboboxes, and
possibly numeric values. Pressing enter/select checks or unchecks a box,
brings up a new listbox for a multiple choice, or a slider for number
selection. Cursor keys move up and down the list, esc/cancel exits.

The list is not scrollable by mouseover alone. Mouse wheel scrolls the list.
Left-click on an item selects it, right-click cancels backward but won't
exit the menu. Topmost menu item should be Exit Settings.

If there are a lot of menu options, split the menu into submenus from a main
menu, where the main menu is a separate screen; having two menus visible
simultaneously for the user to hop between isn't workable with the current
textbox design.

Window size probably doesn't need to be editable graphically. The auto option
is good enough for most cases, and otherwise the user can edit the ini file.
Trying to set a window pixel size would be a bit annoying in a gamepad-driven
menu, due to the large number ranges involved. Fullscreen mode is also always
at the native resolution now, so no settings required for it.

Settings that won't be needed: protag name change (not supported by all games
anyway, and it's game-specific, and would require a virtual keyboard),
autosave settings (defaults should be sufficient), censorship level (it's
game-specific, easiest done upon newgame if at all)

Settings that need to included:

UI size multiplier - when selected, brings up a slider? Defaults to current
size multiplier. Value should be displayed as a percentage, and since its
useful values are exponential? logarithmic?, it may be best to do something
like an x*x function from the slider's linear value and scale it to
a reasonable minimum and maximum bounds, where 32k is 100%.

Pixel scaler - combobox.

Font selection - 2 comboboxes, for Latin and Japanese; when selected, brings
up a list of enumerated font face names, default-highlighting the currently
selected font.

VSync - checkbox.

Sound - checkbox.

Sound volume - slider.

Interface sounds - checkbox.

(I don't see a need for a separate music/effects setting. You get both or
neither. Also, voiceovers don't exist.)


Textboxes, originally
=====================

Most games in framed mode have a box of 512x64. 16px font, no linespacing.
Twilight has 496x64. It has a 16px font, with no linespacing.
Marilyn has 500x100.
Mayclub is 600x80. It has a 16px font, with 4 pixels extra linespacing.
Nocturne is 512x80. It has a 16px font, with 4 pixels extra linespacing.
Eve is 416x57. It has a 16px font, with 3 pixels extra linespacing.
Angelscollection 2 has 544x64.
Angelscollection 1 has 592x48. (add a decomp hack to extend height to 64?)

Sakura has viewarea at 80,16; size 480x296. Textbox at 64,328; size 512x64.
Viewarea 8192,2621; size 49152x48497. Textbox 6554,53740; size 52429x10486.


Saving and loading (ideas)
==================

- Both on same screen, 10 slot buttons, save button and load button
- Allow only when gamestate is waiting for keypress or user choices
- sys.allowsaves/allownosaves
- While on saveload screen, make sure effector suspends all effects except
  transitions, and make right-click/esc quit the screen
- Push fxbuffyrefcount, set to 0
- RunScript SAVELOAD
   + gfx.pushgobstate : Push current gob state somewhere safe
   + gfx.stopanims
   + gfx.screenshotbkg : Clear textboxes from the screen, copy the contents
     of outputbuffy^ into a new gcache item, attach it to background gob 0
   + gfx.darkenbkg : Alter every pixel of the background gob to be the
     average of its color and its greyscale value shr 1
   + gfx.clearallbutbkg
   + draw all saveload screen elements as gobs, set up mouseover events
   + gfx.transition crossfade
   + @exitsaveload: gfx.popgobstate
   + gfx.transition crossfade

- When a game is loaded, if the current script is SAVELOAD, then the script
  is automatically popped off and execution continues in the script from
  where SAVELOAD was called
- Also upon loading all events whose owner was the SAVELOAD script will be
  wiped out, so the saving interface mouseovers and such won't haunt us
