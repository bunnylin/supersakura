SuperSakura scripting language
==============================

A simple language with statements and expressions, variables, words of power,
and labels that can be called or jumped to. The script code and strings are
expected to be UTF-8, and the code is entirely case-insensitive.

Indentation and whitespace can be used freely. Statement components should be
separated by plain spaces or tabs.

Line comments are marked with a hash sign or a double slash. There are no
block comments.

All labels, variables, and game resources must have names that are from 1 to
31 characters long. File suffixes only signify the resource type, and are not
considered part of the resource name. Labels and resources can begin with any
of and consist only of alphanumeric characters and these: _ - ! & ~ [ ]
Variables must start with a letter, and consist only of alphanumerics and
these: _ [ ]

Although expressions can be split over multiple lines, linebreaks have
special meaning in an if-then-else-end clause. It's generally best to have
only one statement on one line.

There are no {begin-end} code blocks, although if-then-else-end can be used
to execute multiple statements.

There are no user-definable function calls or macros, although calling labels
may serve this need. There are pre-defined words of power for interacting
with the engine, which return values and can be used as part of expressions.

Words of power can have mandatory and optional arguments. For a full list,
see below. Every argument has a value type and a short name. All optional
arguments have default values. Arguments can be invoked in any order.
Arguments can be invoked explicitly using -argname=x or -argname x. They can
also be invoked fuzzily by just giving the value x, which will then be taken
as the first uninvoked argument it can somehow typefit into. Errors are shown
for invoking undefined arguments, failing to typefit a fuzzy element, trying
to invoke an argument more than once in one statement, and lacking mandatory
arguments.

Variables are dynamically typed, and can be 32-bit signed integers, or UTF-8
strings. Variables are not explicitly declared. There are no floating point
variables, booleans, pointers, objects, arrays, sets, tuples.

Variable references use a dollar sign prefix. All characters after the dollar
sign up to the next invalid variable name character are read as part of the
variable name.
If the variable name contains a dollar sign, that is read as the start of
another variable reference whose resolved value should be used as part of the
full variable name. Since the variable name is a string expression, you can
use brackets to construct a more convoluted string to use as the variable
name.

To set a variable, you use a colon-equals character pair. The single and
double equals-signs are both used as the comparison operator. Comparisons
return a 0 for false, and 1 for true.

All variables are global and are accessed by name, resolved at runtime using
a hashtable. This allows faking arrays and key-value tables, or otherwise
using indirect references, by building a variable name from strings and other
variables.

Strings are marked with a single-quote or double-quote. Whichever is used to
mark a string's beginning, the same must be used to mark the end. Characters
inside a string can be escaped with backslash. If a statement parameter
clearly expects a string, quotes don't need to be used if the string contains
no spaces.

A string or numeric variable can be used as part of a string. If the string
expression was started with quotes, a variable reference must use an escaped
dollar sign followed by a single immediate string name. If the expression
does not have quotes, a variable reference is indicated by an unescaped
dollar sign and can use brackets and expression operators.

Strings can be joined with the plus operator. Numbers and numeric variables
can be joined to strings as well, and are automatically converted. There is
no method of splitting, shortening, or accessing a string by index. All
string comparisons are case-insensitive. Multiplying a string by a number
results in the string being repeated that number of times.

Both string expressions and numeric expressions can make use of brackets.

True multithreading is not available, but co-operative multitasking is done
by using script fibers that must periodically yield execution or go into
a wait state.

Labels are used to divide scripts into segments. Labels can be jumped to,
called, or launched as a new fiber. When defining a label, it must be
prefixed with the at sign, and ends with a colon. Labels within the same
script file can be referenced by their direct name, while labels in other
script files must be referenced by prefixing the script name and a dot. All
script files begin with an implicit empty label.

When a game is run, the implicit beginning label of the "main" script is
always executed first in a new fiber named "main". A main script must be
present for a game to run.

---------------------------------------------------------------------

Script - monolithic
String
Mod
xlation


Only constant string allowed:
@pupulabel:

Non-localised or dupable string expression, saved in string table:
gfx.show PUPU ofsx 555
gfx.show $pupusprite ofsx 555
gfx.show PUPU\$pupunum ofsx 555
gfx.show "PUPU\$pupunum" ofsx 555
gfx.show (PUPU\$pupunum) ofsx 555
gfx.show ("PUPU\$pupunum") ofsx 555
gfx.show ("PUPU" + $pupunum) ofsx 555
gfx.show ("PUPU"$pupunum) ofsx 555
goto pupulabel
goto $labelvar
goto ("pupu" + "label")
goto ($pupulabel + 5558039)

Localised string expression, operators hardcoded and literals saved in
a string table:
print "perkele"
print $puputhing
print "pupun \$puputhing"
print "pupun " + $puputhing
$puputhing = "puhelin"
$puputin = $puputhing
$pupu = "pupun " + $puputhing
$pupu = 555 + "-" + 8039

- in commands where the expected argument is a localised string expression,
all string literals go in string table
- where const string or single variable expected, store hardcoded

- script names must be 1-31 characters, empty name not allowed; also only
alphanumeric etc may be used
- labels must be constant, no variable dereferencing in label definitions
- labels get an implicit scriptname suffix and dot, e.g. @CS101.3DF0
- every script gets an implicit empty start label, e.g. @CS102.
(runscripts become goto or call @label.)
- each label section in a script followed by another section gets an implicit
non-returnable goto next section at its end
- goto commands are resolved at runtime to strings
- script fiber execution remembers which label it most recently touched
- if a goto resolves at runtime as dotless, then the current label's prefix
is automatically used
- most goto commands should be returnable calls, except if/case jumps
- when a call source is pushed, it needs to be label:ofs pointing to the
offset immediately after the call command

- the string table is built from all strings found in scripts during compile
process; source scripts must be processed in alphanumeric order so dupables
are predictably numbered
- hardcoded strings (resource names, variable names, goto targets etc) are
saved directly as length-prefixed ministrings
- choice strings, ellipses, dialogue titles etc dupables are saved in
bytecode as a simple index reference, dword with the top bit set; in the
string table these go under an empty label
- unique strings are saved as another dword index reference in bytecode, with
the top bit clear; in the string table these go under the appropriate label
- at runtime, when a string table reference is encountered, if the top bit is
set then the index is pulled from the empty label, otherwise from the current
label's strings

The rules for deciding whether a string is hardcoded, dupable or unique:
- if not in quotes, then hardcoded ministring, else...
- if preceded by ~ then dupable
- if preceded by ? then unique
- if the current wop is choice.on/off/remove/set, then it's dupable
- else unique

- boxes by default are keyed to use default language 0
- scripts may override the language key in a box
- boxes can be forced hidden by scripts; for bilingual games,
have two sets of textboxes and a contentforward in the first
- if contentforward = 0, don't forward; else all print commands into this box
spawn a print to contentforward box
- variable definitions must be only ascii alphanumeric and -_

internal:
- GetScr(namu) scans scriptlist[] for namu, returns index
- scripts are saved by label
- scriptlist[] needs to be sorted alphabetically by name, probably already is
- each label block starts with an implicit nop since ofs 0 must be illegal

- GetStr(namu, langid) scans stringdb[langid].stringlist[] for namu, returns
index
- If not found and langid > 0 then return recursed GetStr(namu, 0)
- If not found and langid=0 then log warning and return "namu"

modding:
- source dat version string must be a precise match for mod target version
string
+ if fail, warn the user but allow going ahead anyway
- new scripts under SCR\ get tacked on as normal; redefining labels
overwrites existing ones, recommend modder avoid doing this
- strings from new labels get tacked on as normal too; overwrites any old
strings with the same hash
- new audiovideo likewise atomic overwrites or adds

note:
- when confirming, and topmost interactive box has no choices but more text,
then tap that box and all other interactiveboxes below pending more text
- recomp must warn and remove periods from filenames while saving

-------------------------
Types:
Reserved Words of Power (goto, gfx.show, print, if)
Immediate integer numbers, 32-bit (0, 5558039, 0x7F, -1, 0xFFFFFFFF)
Integer number variables, 32-bit ($a, $num)
Immediate strings (PUPU, "PUPU\$pupunum", @pupulabel:)
String variables ($a, $num)
String table references ("Mwahaha, she exclaimed", "CHOOSE \$num")

Parser state machine:
- If statement starts with @ then it's a label, with validated charset; must
end in a colon; saved in uppercase; max 31 chars; may be followed by more
stuff on the same line, which should be parsed afresh; multiple labels on the
same line are allowed
- If statement starts with " ' $ - or a number, then it's an expression
- If statement starts with a..z then it's a word of power

- If line starts with # or // then the line is a comment
- If line starts with $ then insert "let" as word of power before this
- If line starts with " then insert "print" as word of power before this
- If line starts with ( then complain that a line can't start with that
- If line starts with if/else/end/let then it's a special case

if:
single mandatory argument: numeric expression
followed by optional "then" or colon
if rest of line is not empty or "begin",
then: add rest of line, $A, "end", $A at beginning of fakeread string
iftag = currentlabel:ofs
ifstack.push iftag
output bytecode for "ifnot (numeric expression) [goto-ofs] iftag"

else:
no arguments allowed, but line can have other stuff
followed by optional colon
if rest of line is not empty or "begin",
then: add rest of line, $A, "end", $A at beginning of fakeread string
newtag = currentlabel:ofs
output bytecode for "non-returnable jump newtag"
iftag = ifstack.pop
output label @iftag
ifstack.push newtag

end or endif:
no arguments allowed, must not be followed by anything
iftag = ifstack.pop
output label @iftag

if x=y then meh
if (x=(y+1)): meh
if x meh
if x if y: if z then if (a) if b meh
FORBIDDEN: if x=y then meh else meh
if x=y then
  meh
else
  meh
end
if x=y
  meh
else meh

let:
must be followed by a $ and then non-space character, if not then complain
remove $
first mandatory argument: non-localised string expression
followed by mandatory :=
final mandatory argument: expression

Words of power are defined with mandatory and optional arguments. Every
argument has a value type and short spaceless name. Optional arguments can
have default values. Arguments can be defined and invoked in any order. When
invoking, arguments can be specific by using an element -arg=x or -arg x or
fuzzy by using an element x, which is used as the first uninvoked argument
that it can be typefitted into. Invoking an undefined argument or failing to
typefit a fuzzy element or trying to invoke the same argument more than once
in one command or lacking any mandatory argument are errors.

- Elements are read like this:
If starts with " it's a string, read until next ", ignore any escapes
If starts with $

- gfx.show without gob type must default to anim, and if at runtime no anim
defined then revert to sprite
- debug console commands should be built into scriptlabel[0] which is
normally illegal, and a new fiber is spawned to run it; the script label must
have an implicit fiber.stop at the end

Words of power:

Expression rules:


---------------------------------------------------------------------

What's not handled: floating point values, power functions, function calls,
unary operators (NOT, negation)

For clarity, wherever in script code expressions are used, if there is
anything after the expression on the same line (another expression or value,
or other command data), the expression should be terminated with either
a comma or a semi-colon.

High bit $80 set: this is the last value of the expression
Bitmask $70: precedence group

--------------------
7F byte
7E shortint
7D word
7C integer
7B longint
7A undefined
79 8
78 7
77 6
76 5
75 4
74 3
73 2
72 1
71 0
70 -1
--------------------
63 dvar, chr(253)
62 cosine, cos, C
61 random, rnd, R
60 var, V
52 AND, &
51 OR, |
50 XOR, chr(254)
44 modulo, mod, %
43 divide, div, /
42 multiply, mul, *
41 SHR, >>, }
40 SHL, <<, {
31 -
30 +
25 >
24 =
23 <
22 >=, ]
21 <=, [
20 <>, chr(1)
10 )
01 (
--------------------

Shunting-yard algorithm:
- chomp string from left to right
- numbers go straight into output as constant values
- left bracket is pushed onto stack
- right bracket?
   * pop operators off the stack until a left bracket is encountered
   * both brackets are vanished
- a new operator?
   * pop operators until topmost has lower precedence than the new one
   * push new operator
- at end of string, pop everything off the stack

Syntax checking in input:
- $70..$7F: numeric values are operands
   * must be followed by a normal operator or closed bracket; anything else
     means the end of the line
- $60..$6F: function operators (sort of)
   * must be followed by a numeric operand, function operator or open
     bracket; anything else is an error
- $20..$5F: normal operators
   * must be followed by a numeric operand, function operator or open
     bracket; anything else is an error
- $10: closed bracket
   * must be followed by a normal operator or closed bracket; anything else
     means the end of the line
   * an open bracket must exist somewhere in the stack
- $01: open bracket
   * must be followed by a numeric operand, function operator or any bracket;
     anything else is an error
- At end of line, no open brackets must be left in the stack

Example for testing, used in WinterQ test suite
===============================================
let v1 := v4 + 6 * (3 - r(r5)) * 2 + v((6 + v3) * 5) - $A
Output: 4 v 6 3 5 r r - * 2 * + 6 3 v + 5 * v + 10 -

For resolving here, assume [v(n) = n] and [r(n) = 1]
Correct result from both: 63

Building the reverse notation:
==========
Input: + 6 * (3 - r(r5)) * 2 + v((6 + v3) * 5) - $A
Stack: v
Output: 4
==========
Input: * (3 - r(r5)) * 2 + v((6 + v3) * 5) - $A
Stack: +
Output: 4 v 6
==========
Input: - r(r5)) * 2 + v((6 + v3) * 5) - $A
Stack: +*(
Output: 4 v 6 3
==========
Input: r5)) * 2 + v((6 + v3) * 5) - $A
Stack: +*(-r(
Output: 4 v 6 3
==========
Input: )) * 2 + v((6 + v3) * 5) - $A
Stack: +*(-r(r
Output: 4 v 6 3 5
==========
Input: ) * 2 + v((6 + v3) * 5) - $A
Stack: +*(-
Output: 4 v 6 3 5 r r
==========
Input: * 2 + v((6 + v3) * 5) - $A
Stack: +*
Output: 4 v 6 3 5 r r -
==========
Input: 2 + v((6 + v3) * 5) - $A
Stack: +*
Output: 4 v 6 3 5 r r - *
==========
Input: v((6 + v3) * 5) - $A
Stack: +
Output: 4 v 6 3 5 r r - * 2 * +
==========
Input: + v3) * 5) - $A
Stack: +v((
Output: 4 v 6 3 5 r r - * 2 * + 6
==========
Input: ) * 5) - $A
Stack: +v((+v
Output: 4 v 6 3 5 r r - * 2 * + 6 3
==========
Input: * 5) - $A
Stack: +v(
Output: 4 v 6 3 5 r r - * 2 * + 6 3 v +
==========
Input: - $A
Stack: +
Output: 4 v 6 3 5 r r - * 2 * + 6 3 v + 5 * v
==========
Output: 4 v 6 3 5 r r - * 2 * + 6 3 v + 5 * v + 10 -
==========

Evaluation:
==========
Input: 6 3 5 r r - * 2 * + 6 3 v + 5 * v + 10 -
Stack: 4 v
Action: v4 = 4
Stack: 4
==========
Input: r - * 2 * + 6 3 v + 5 * v + 10 -
Stack: 4 6 3 5 r
Action: r5 = 1
Stack: 4 6 3 1
==========
Input: - * 2 * + 6 3 v + 5 * v + 10 -
Stack: 4 6 3 1 r
Action: r1 = 1
Stack: 4 6 3 1
==========
Input: * 2 * + 6 3 v + 5 * v + 10 -
Stack: 4 6 3 1 -
Action: 3 - 1 = 2
Stack: 4 6 2
==========
Input: 2 * + 6 3 v + 5 * v + 10 -
Stack: 4 6 2 *
Action: 6 * 2 = 12
Stack: 4 12
==========
Input: + 6 3 v + 5 * v + 10 -
Stack: 4 12 2 *
Action: 12 * 2 = 24
Stack: 4 24
==========
Input: 6 3 v + 5 * v + 10 -
Stack: 4 24 +
Action: 4 + 24 = 28
Stack: 28
==========
Input: + 5 * v + 10 -
Stack: 28 6 3 v
Action: v3 = 3
Stack: 28 6 3
==========
Input: 5 * v + 10 -
Stack: 28 6 3 +
Action: 6 + 3 = 9
Stack: 28 9
==========
Input: v + 10 -
Stack: 28 9 5 *
Action: 9 * 5 = 45
Stack: 28 45
==========
Input: + 10 -
Stack: 28 45 v
Action: v45 = 45
Stack: 28 45
==========
Input: 10 -
Stack: 28 45 +
Action: 28 + 45 = 73
Stack: 73
==========
Stack: 73 10 -
Action: 73 - 10 = 63
