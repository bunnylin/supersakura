---------------------- ===== TO DO ===== -------------------------
SuperSakura
FUTURE
- Native Android port, FPC 3.1.1 or newer should have good enough support
- Consider trimming FPC's System and Sysutils units to save space?
- Audio (full FM etc softsynth)
   + Build a library of custom chip sound effects (rip some from Alleycat
     at least), use those in the games as appropriate
- Add some scriptable customisation to the settings dialog?
- Switch custom mouse cursor to be engine-drawn, Win support for custom
  cursors is too convoluted to rely on across different screen modes, not
  to mention compatibility across operating systems; or perhaps cursor
  changing should be dropped as too much trouble for minimal reward
- Console mode textboxes must each redraw completely if overlapping; also add
  clipping against screen/viewport at least for the background if not the
  text content
- Mousewheel should just scroll choicebox directly; tougher than at first
  glance, since the box scroll effect is gradual and the normal choice
  highlighter doesn't easily take the future scroll position into account,
  leaving the highlight box out of sync with its parent box's scroll offset
- Eye candy
   + Add a pixelisation effect, dynamically slidable pixel size?
   + Add nice wind for sakura petals and snowfall
   + Add a sunlight effect; perhaps full starburst with loc/speed vars
   + Add a rain effect
   + Add a horizontal blur effect, doubled vision (use in sakura CS704)
- Develop a proper Bunnyscaler, or use an existing pixel scaler
- Add graphic scaling at run-time in scriptcode? Scalesizex/y? A rescale
  cache used solely by the Renderer routine, so when a gob of unusual size
  is requested, it's rescaled and cached? Smooth size slides done this way
  might be pretty heavy, particularly if using BunnyScaler...
- Automated testing stuff:
   + Commandline switch/debug option to disable frame limiter; it needs
     to set the per-frame delay to 0 and override the millisecs elapsed
     calculation with a constant 64 ms. Allow switch to set constant?
   + Add a randomtest commandline switch/debug option; it clears text
     boxes as they come up, and selects random multiple choice options
     by simulating button presses; and if there are clickable items, it
     needs to click on a random one, except in main script it should
     always pick item 1 (Start Game). Also do a bunch of random mouseons
     and offs for overable items, if any.
   + Save every button press and non-move mouse event incl. mouseovers
     in an internal buffer that needs to be dumped in a text file in case
     of abnormal program exit; add a commandline switch/debug option to
     play back virtual input from a file like this. The text file dump
     should also have remarks to clarify current script location (offset?
     label?) and the strings of choices selected.
- Extra content as optional mods!
   + Sad face for sakura/Hidemi-okaasan
   + Import the shrine background from FromH, insert as brief extra scene
     in runaway once or twice, to foreshadow and remind about the tree
   + Import the church at night from Parfait, insert in Saku/Seia's story
   + Runaway is the most linear of the classics; add choices for bypassing
     some H-scenes, resulting in mildly different epilogue segments; add
     an extra textual ending or two based on how Hiroaki comes to terms
     with his power?
   + 3sis has too much exposition at the beginning, streamline it
   + Runaway needs a clickable map when moving around downtown
   + 3sis needs a clickable map when moving around the school
   + Expanded soundtrack mod, subtle variations on existing themes?
   + Eye-blinkies for event graphics wherever appropriate
REQUIRED FOR 1.0
- Test whether mods show up as expected on the frontend; should only be shown
  if all parent dats are present; also check if infinite parent loops work
- A mod should probably have an empty banner, so the engine can fall back to
  the main project's banner image
- Create a Settings dialog, video and audio config
   + Needs a simple widget system of our own; existing ones would probably
     work well except I'd like gamepad support; most likely layout will be
     something like PPSSPP menus, a vertical list that scrolls, with the
     item names on the left and the values on the right
- Add a friendly button in game/dat selection dialog to directly convert
  games to ssakudats
   + Integrate decomp/beautify/recomp in supersakura?
   + Source dir selection may require a separate UI, current choicebox
     design doesn't really work with directory tree traversal; perhaps
     just put in a text field and tell the user to type the directory...
     Vertical-only choicebox could forward left/right presses to area
     events, allowing a file list and actions at the same time?
- Create a save/load dialog, accessing separate gamename.Sxx files
- 8 autosave slots, use a timer and save once every five minutes during
  waitkey or waitevent, but only if saves allowed?
- Check how well multiple displays and hi-DPI are working
- Check how well touch controls work if at all
- Textboxes:
   + Add a box padding parameter; boxsize = content + margins + padding;
     background gradient, texture, and bevel apply to non-padded area, but
     frame decor is relative to the padded area
   + Add a box drop shadow?
   + Add more bevelling parameters, to allow shaped bevels etc
   + In addition to a primary text color, allow for a color gradient?
   + Implement text outlines, with RGBA color, thickness, offset, and the
     option to fade alpha to transparent toward the outline edge; the
     thickness and offset must be 32k values relative to fontheight
- Rework Moonsynth into Bunnysynth, plain midi; as for sound effects,
  consider internal support for wav/flac/ogg
- Change mcsassm unit logging to somehow feed into the main program's log
  procedure; needs quick timestamps (perhaps just use tickmark) and the log
  proc might be thread-safe with just a critical section? The log attach
  can't be during unit init since the actual log file hasn't been set up yet,
  so unit init can't produce logging unless the init is explicitly called
  later by main, and the log proc must be attached before that...
- Make the pre-cacher read ahead in bytecode from the current position to
  chart out all potential needed graphics at least a couple
  waitkeys/sleeps/if-jumps away; pre-cacher also needs to strongly
  prioritise big pictures since small ones can be loaded at runtime almost
  instantly anyway
- Reimplement precipitation effects
- Ctrl+I should display a meta-info box, previously ctrl+v
- See if can read TTF etc headers to find font face names, that would
  allow quick font enumeration at startup and then friendly selection
- Implement the software pixel shader style thing to replace the old
  renderer; subpixel repositioning will have to go here too
- Skip seen text is cumbersome if implemented per-string, but it could
  work well on a per-label basis, with far less user state to track
- Change animation sequence handling to run code snippets in minifibers
  instead of the current special syntax monstrosity; anim snippets should
  be a list of their own, and gobs and box decors point to list items
- Commandline option to dump the game transcript into a file as you play
- Language changing at runtime probably shouldn't change choicebox language
  if any choices are visible, choicematic's not set up for that... although
  if choice control commands just use strvalue[0], maybe no problem?
- Viewframe option in metamenu for games that have one
- Implement a metamenu as per uidesign doc
   + New wops needed:
     choice.endtyping
     choice.typeinbox [box]
     fiber.waittyping
     gfx.stashthumbnail [name]
     sys.exitmeta
     sys.getuimag
     sys.getnumsaves
     sys.getsavedate [index]
     sys.getsavename [index]
     sys.haslanguage [name]
     sys.loadsavethumb [index] [name]
     sys.loadstate [index]
     sys.savestate [index] [name]
     sys.setuimag [value]
     sys.showhistory
     tbox.getlastline [box] (must autodouble all backslashes)
   + As long as choicematic.typeinbox is valid, user keypresses are added to
     the last line of the box; pressing enter in this case takes precedence
     and ends typing, resuming fibers waiting for typing to end
- Mcsassm needs a way to add run-time incidental graphics
- Add abs operator for sakuscript
- Set up Vagrant configs for the below VMs?
- Set up another distro or two in VMs and make sure can build on them; should
  try Ubuntu and Fedora? Also FreeBSD, should be trivial to support
- Set up win7 in a VM and make sure can build on it, also check the esc key
  in minicrt
- Build installable AUR package
- Add a simple makefile for Linux deployment; although I don't really want to
  push the tools into system-wide binary directories... would be resolved if
  the tools were built into the main engine's frontend
- Add a Windows installer, InnoSetup?
- Improve the main site, needs better download section at least; move
  progress page to be part of main page to make space?
- Implement a basic save/load state command; remember to save all array
  sizes in save file; even if constant, it may be desirable to expand them
  in the future, and it's better to save stuff dynamically anyway; make
  save files DAT-style modular
   + Should have a separate save state command for each engine component and
     a main command that invokes the others
- Re-implement quick RGB tweak? And by extension the flash effect
- Re-add gamepad support
- Scrollable boxes should have fading text to signal more content
- By default, binaries should be in a write-protected executable
  directory; writable subdirectories for "data" and "save" will be
  used for the other stuff, or if they don't exist and cannot be
  created, they are put under the user's home directory as appropriate

------------------------------------------------------------------
Recomp
FUTURE
- When adding support to more games:
   + Write intro and ending scripts, new title screens
   + Make program icons and textboxes (box idea: a raised decoration on
     the left going higher than rest of box, leaving a snug corner/slot
     for a title box to fit in, title box can have diagonal far edge)
   + Touch up all graphics to eliminate artifacts
   + Go over all scripts, add hacks in decomp to use cool new effects
   + Consider adding sound effects and ambient sounds?
REQUIRED FOR 1.0
- Make a mod that inserts new special effects all over the scripts
- newdata.txt: add entries for gamename, gameversion, modname, moddesc
- Make sure data files go under user profile if workdir not accessible
- Make program icons for all three games
- Add intros for the prime three
- Add music conversion options in data.txt; needs instrument mappings and
  vol/key transposing at least; useful for .M or .O files

------------------------------------------------------------------
Decomp
FUTURE
- Support for new games
- Improved game support:
   + Proper translation of the few remaining odd bytecodes
   + Figure out the .O music format
   + Fix incorrect .SC5 looping in FromH
   + Add a tilemap mode? for top-down jrpg adventures like Vanishing Point
   + Tasogare needs a wolf3d-style dungeon, and an automap
- Check the broken Deep graphics in the original, just keep jumping ahead
  in scripts until find one or two; if they still look corrupt, write
  a brute force fixer to guess at what the corrupt bytes should be
- Treat .hdi and .fdi files as subdirectories, if can figure out the
  format, so it'll be easier to convert games
REQUIRED FOR 1.0
- Make sure output data goes under user profile if workdir not accessible
- Specific global vars with known uses in games should be named
- Fix music conversion, polish code
- Integrate Beautify
- Use v512 for endings in 3sis SK_737, SK_738 and SK_743

------------------------------------------------------------------
Bunnylin's Brilliant Beautifier
FUTURE
- Nothing!
REQUIRED FOR 1.0
- Touch up all Sakura graphics (112 sprites, 52 anims, 94 event pictures,
  90+ other pictures)
- Touch up all 3sis graphics (40 sprites, 40 anims, 90 event pictures,
  30+ other pictures)
- Touch up all Runaway graphics (22 sprites, 22 anims, 72 event pictures,
  50+ other pictures)
- Touch up common pictures (about 16 from Xfer, 7 otherwise)
- Touch up remaining other pictures (about 150...)
- Modularise Beautify into a unit, usable by ssakura/Decomp/Detailer
- Finish refactoring and clean the code so it'll work again...

------------------------------------------------------------------
Other
FUTURE
- Investigate FLIF compression, switch from PNG to save 25% space? Without
  image editing tool support, would make resource modification harder, so
  would have to keep images as PNGs while unbundled and FLIFs only in
  bundles; would preferably need a pasflif unit to minimise dependencies,
  but no one's made one yet; flif code seems a bit complex, might take
  about two weeks to write a pascal version...
REQUIRED FOR 1.0
- Put up a bitcoin address for donations
- Make vector graphic funny thanks-images to thank donaters?
   + 3sis: Emi glowering at Risa over logo, Yuki in middle with drop
   + Runaway: Hiroaki with two clingy chicks shouted at by wossname?
   + Sakura: Last Supper scene in classroom, desks piled at door
-------------------- ===== TO DO END ===== -----------------------
